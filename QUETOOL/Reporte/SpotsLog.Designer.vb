'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SpotsLog"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SpotsLog
    Inherits Global.System.Data.DataSet
    
    Private tableSpots_Log As Spots_LogDataTable
    
    Private tableSpots_Detalle_Log As Spots_Detalle_LogDataTable
    
    Private tableCabecera As CabeceraDataTable
    
    Private relationSpots_LogSpots_Detalle_Log As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Spots_Log")) Is Nothing) Then
                MyBase.Tables.Add(New Spots_LogDataTable(ds.Tables("Spots_Log")))
            End If
            If (Not (ds.Tables("Spots_Detalle_Log")) Is Nothing) Then
                MyBase.Tables.Add(New Spots_Detalle_LogDataTable(ds.Tables("Spots_Detalle_Log")))
            End If
            If (Not (ds.Tables("Cabecera")) Is Nothing) Then
                MyBase.Tables.Add(New CabeceraDataTable(ds.Tables("Cabecera")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Spots_Log() As Spots_LogDataTable
        Get
            Return Me.tableSpots_Log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Spots_Detalle_Log() As Spots_Detalle_LogDataTable
        Get
            Return Me.tableSpots_Detalle_Log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cabecera() As CabeceraDataTable
        Get
            Return Me.tableCabecera
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SpotsLog = CType(MyBase.Clone,SpotsLog)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Spots_Log")) Is Nothing) Then
                MyBase.Tables.Add(New Spots_LogDataTable(ds.Tables("Spots_Log")))
            End If
            If (Not (ds.Tables("Spots_Detalle_Log")) Is Nothing) Then
                MyBase.Tables.Add(New Spots_Detalle_LogDataTable(ds.Tables("Spots_Detalle_Log")))
            End If
            If (Not (ds.Tables("Cabecera")) Is Nothing) Then
                MyBase.Tables.Add(New CabeceraDataTable(ds.Tables("Cabecera")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSpots_Log = CType(MyBase.Tables("Spots_Log"),Spots_LogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSpots_Log) Is Nothing) Then
                Me.tableSpots_Log.InitVars
            End If
        End If
        Me.tableSpots_Detalle_Log = CType(MyBase.Tables("Spots_Detalle_Log"),Spots_Detalle_LogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSpots_Detalle_Log) Is Nothing) Then
                Me.tableSpots_Detalle_Log.InitVars
            End If
        End If
        Me.tableCabecera = CType(MyBase.Tables("Cabecera"),CabeceraDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCabecera) Is Nothing) Then
                Me.tableCabecera.InitVars
            End If
        End If
        Me.relationSpots_LogSpots_Detalle_Log = Me.Relations("Spots_LogSpots_Detalle_Log")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SpotsLog"
        Me.Prefix = ""
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSpots_Log = New Spots_LogDataTable
        MyBase.Tables.Add(Me.tableSpots_Log)
        Me.tableSpots_Detalle_Log = New Spots_Detalle_LogDataTable
        MyBase.Tables.Add(Me.tableSpots_Detalle_Log)
        Me.tableCabecera = New CabeceraDataTable
        MyBase.Tables.Add(Me.tableCabecera)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("Spots_LogSpots_Detalle_Log", New Global.System.Data.DataColumn() {Me.tableSpots_Log.ID_SPOTS_LOGColumn}, New Global.System.Data.DataColumn() {Me.tableSpots_Detalle_Log.ID_SPOTS_LOGColumn})
        Me.tableSpots_Detalle_Log.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationSpots_LogSpots_Detalle_Log = New Global.System.Data.DataRelation("Spots_LogSpots_Detalle_Log", New Global.System.Data.DataColumn() {Me.tableSpots_Log.ID_SPOTS_LOGColumn}, New Global.System.Data.DataColumn() {Me.tableSpots_Detalle_Log.ID_SPOTS_LOGColumn}, false)
        Me.Relations.Add(Me.relationSpots_LogSpots_Detalle_Log)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSpots_Log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSpots_Detalle_Log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCabecera() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SpotsLog = New SpotsLog
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Spots_LogRowChangeEventHandler(ByVal sender As Object, ByVal e As Spots_LogRowChangeEvent)
    
    Public Delegate Sub Spots_Detalle_LogRowChangeEventHandler(ByVal sender As Object, ByVal e As Spots_Detalle_LogRowChangeEvent)
    
    Public Delegate Sub CabeceraRowChangeEventHandler(ByVal sender As Object, ByVal e As CabeceraRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Spots_LogDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_SPOTS_LOG As Global.System.Data.DataColumn
        
        Private columnID_SPOT As Global.System.Data.DataColumn
        
        Private columnID_CAMPANIA As Global.System.Data.DataColumn
        
        Private columnDESC_CAMPANIA As Global.System.Data.DataColumn
        
        Private columnID_SISTEMA As Global.System.Data.DataColumn
        
        Private columnDESC_SISTEMA As Global.System.Data.DataColumn
        
        Private columnID_EJERCICIO As Global.System.Data.DataColumn
        
        Private columnDESC_EJERCICIO As Global.System.Data.DataColumn
        
        Private columnCADENA As Global.System.Data.DataColumn
        
        Private columnHORA As Global.System.Data.DataColumn
        
        Private columnPROGRAMA As Global.System.Data.DataColumn
        
        Private columnTARIFABRUTA As Global.System.Data.DataColumn
        
        Private columnD1 As Global.System.Data.DataColumn
        
        Private columnD2 As Global.System.Data.DataColumn
        
        Private columnD3 As Global.System.Data.DataColumn
        
        Private columnD4 As Global.System.Data.DataColumn
        
        Private columnD5 As Global.System.Data.DataColumn
        
        Private columnTARIFANETA As Global.System.Data.DataColumn
        
        Private columnRATINGPROGRAMA As Global.System.Data.DataColumn
        
        Private columnRATINGTANDA As Global.System.Data.DataColumn
        
        Private columnTIPO_RATING As Global.System.Data.DataColumn
        
        Private columnACCION As Global.System.Data.DataColumn
        
        Private columnU_ACCION As Global.System.Data.DataColumn
        
        Private columnF_ACCION As Global.System.Data.DataColumn
        
        Private columnPROGRAMA_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnTARIFABRUTA_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnD1_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnD2_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnD3_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnD4_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnD5_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnTARIFANETA_MODIFICADO As Global.System.Data.DataColumn
        
        Private columnRATING_MODIFICADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Spots_Log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_SPOTS_LOGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SPOTS_LOG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_SPOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SPOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_CAMPANIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CAMPANIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_CAMPANIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_CAMPANIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_SISTEMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SISTEMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_SISTEMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_SISTEMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_EJERCICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_EJERCICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_EJERCICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_EJERCICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CADENAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCADENA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROGRAMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROGRAMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TARIFABRUTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARIFABRUTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnD3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnD4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnD5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TARIFANETAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARIFANETA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RATINGPROGRAMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRATINGPROGRAMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RATINGTANDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRATINGTANDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_RATINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_RATING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_ACCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_ACCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_ACCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_ACCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROGRAMA_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROGRAMA_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TARIFABRUTA_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARIFABRUTA_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D1_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD1_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D2_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD2_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D3_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD3_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D4_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD4_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D5_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD5_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TARIFANETA_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARIFANETA_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RATING_MODIFICADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRATING_MODIFICADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Spots_LogRow
            Get
                Return CType(Me.Rows(index),Spots_LogRow)
            End Get
        End Property
        
        Public Event Spots_LogRowChanging As Spots_LogRowChangeEventHandler
        
        Public Event Spots_LogRowChanged As Spots_LogRowChangeEventHandler
        
        Public Event Spots_LogRowDeleting As Spots_LogRowChangeEventHandler
        
        Public Event Spots_LogRowDeleted As Spots_LogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSpots_LogRow(ByVal row As Spots_LogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSpots_LogRow( _
                    ByVal ID_SPOTS_LOG As Integer,  _
                    ByVal ID_SPOT As Integer,  _
                    ByVal ID_CAMPANIA As Integer,  _
                    ByVal DESC_CAMPANIA As String,  _
                    ByVal ID_SISTEMA As Integer,  _
                    ByVal DESC_SISTEMA As String,  _
                    ByVal ID_EJERCICIO As Integer,  _
                    ByVal DESC_EJERCICIO As String,  _
                    ByVal CADENA As String,  _
                    ByVal HORA As String,  _
                    ByVal PROGRAMA As String,  _
                    ByVal TARIFABRUTA As Double,  _
                    ByVal D1 As Double,  _
                    ByVal D2 As Double,  _
                    ByVal D3 As Double,  _
                    ByVal D4 As Double,  _
                    ByVal D5 As Double,  _
                    ByVal TARIFANETA As Double,  _
                    ByVal RATINGPROGRAMA As Double,  _
                    ByVal RATINGTANDA As Double,  _
                    ByVal TIPO_RATING As String,  _
                    ByVal ACCION As String,  _
                    ByVal U_ACCION As String,  _
                    ByVal F_ACCION As Date,  _
                    ByVal PROGRAMA_MODIFICADO As Boolean,  _
                    ByVal TARIFABRUTA_MODIFICADO As Boolean,  _
                    ByVal D1_MODIFICADO As Boolean,  _
                    ByVal D2_MODIFICADO As Boolean,  _
                    ByVal D3_MODIFICADO As Boolean,  _
                    ByVal D4_MODIFICADO As Boolean,  _
                    ByVal D5_MODIFICADO As Boolean,  _
                    ByVal TARIFANETA_MODIFICADO As Boolean,  _
                    ByVal RATING_MODIFICADO As Boolean) As Spots_LogRow
            Dim rowSpots_LogRow As Spots_LogRow = CType(Me.NewRow,Spots_LogRow)
            Dim columnValuesArray() As Object = New Object() {ID_SPOTS_LOG, ID_SPOT, ID_CAMPANIA, DESC_CAMPANIA, ID_SISTEMA, DESC_SISTEMA, ID_EJERCICIO, DESC_EJERCICIO, CADENA, HORA, PROGRAMA, TARIFABRUTA, D1, D2, D3, D4, D5, TARIFANETA, RATINGPROGRAMA, RATINGTANDA, TIPO_RATING, ACCION, U_ACCION, F_ACCION, PROGRAMA_MODIFICADO, TARIFABRUTA_MODIFICADO, D1_MODIFICADO, D2_MODIFICADO, D3_MODIFICADO, D4_MODIFICADO, D5_MODIFICADO, TARIFANETA_MODIFICADO, RATING_MODIFICADO}
            rowSpots_LogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSpots_LogRow)
            Return rowSpots_LogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Spots_LogDataTable = CType(MyBase.Clone,Spots_LogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Spots_LogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_SPOTS_LOG = MyBase.Columns("ID_SPOTS_LOG")
            Me.columnID_SPOT = MyBase.Columns("ID_SPOT")
            Me.columnID_CAMPANIA = MyBase.Columns("ID_CAMPANIA")
            Me.columnDESC_CAMPANIA = MyBase.Columns("DESC_CAMPANIA")
            Me.columnID_SISTEMA = MyBase.Columns("ID_SISTEMA")
            Me.columnDESC_SISTEMA = MyBase.Columns("DESC_SISTEMA")
            Me.columnID_EJERCICIO = MyBase.Columns("ID_EJERCICIO")
            Me.columnDESC_EJERCICIO = MyBase.Columns("DESC_EJERCICIO")
            Me.columnCADENA = MyBase.Columns("CADENA")
            Me.columnHORA = MyBase.Columns("HORA")
            Me.columnPROGRAMA = MyBase.Columns("PROGRAMA")
            Me.columnTARIFABRUTA = MyBase.Columns("TARIFABRUTA")
            Me.columnD1 = MyBase.Columns("D1")
            Me.columnD2 = MyBase.Columns("D2")
            Me.columnD3 = MyBase.Columns("D3")
            Me.columnD4 = MyBase.Columns("D4")
            Me.columnD5 = MyBase.Columns("D5")
            Me.columnTARIFANETA = MyBase.Columns("TARIFANETA")
            Me.columnRATINGPROGRAMA = MyBase.Columns("RATINGPROGRAMA")
            Me.columnRATINGTANDA = MyBase.Columns("RATINGTANDA")
            Me.columnTIPO_RATING = MyBase.Columns("TIPO_RATING")
            Me.columnACCION = MyBase.Columns("ACCION")
            Me.columnU_ACCION = MyBase.Columns("U_ACCION")
            Me.columnF_ACCION = MyBase.Columns("F_ACCION")
            Me.columnPROGRAMA_MODIFICADO = MyBase.Columns("PROGRAMA_MODIFICADO")
            Me.columnTARIFABRUTA_MODIFICADO = MyBase.Columns("TARIFABRUTA_MODIFICADO")
            Me.columnD1_MODIFICADO = MyBase.Columns("D1_MODIFICADO")
            Me.columnD2_MODIFICADO = MyBase.Columns("D2_MODIFICADO")
            Me.columnD3_MODIFICADO = MyBase.Columns("D3_MODIFICADO")
            Me.columnD4_MODIFICADO = MyBase.Columns("D4_MODIFICADO")
            Me.columnD5_MODIFICADO = MyBase.Columns("D5_MODIFICADO")
            Me.columnTARIFANETA_MODIFICADO = MyBase.Columns("TARIFANETA_MODIFICADO")
            Me.columnRATING_MODIFICADO = MyBase.Columns("RATING_MODIFICADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_SPOTS_LOG = New Global.System.Data.DataColumn("ID_SPOTS_LOG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SPOTS_LOG)
            Me.columnID_SPOT = New Global.System.Data.DataColumn("ID_SPOT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SPOT)
            Me.columnID_CAMPANIA = New Global.System.Data.DataColumn("ID_CAMPANIA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CAMPANIA)
            Me.columnDESC_CAMPANIA = New Global.System.Data.DataColumn("DESC_CAMPANIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_CAMPANIA)
            Me.columnID_SISTEMA = New Global.System.Data.DataColumn("ID_SISTEMA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SISTEMA)
            Me.columnDESC_SISTEMA = New Global.System.Data.DataColumn("DESC_SISTEMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_SISTEMA)
            Me.columnID_EJERCICIO = New Global.System.Data.DataColumn("ID_EJERCICIO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EJERCICIO)
            Me.columnDESC_EJERCICIO = New Global.System.Data.DataColumn("DESC_EJERCICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_EJERCICIO)
            Me.columnCADENA = New Global.System.Data.DataColumn("CADENA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCADENA)
            Me.columnHORA = New Global.System.Data.DataColumn("HORA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHORA)
            Me.columnPROGRAMA = New Global.System.Data.DataColumn("PROGRAMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROGRAMA)
            Me.columnTARIFABRUTA = New Global.System.Data.DataColumn("TARIFABRUTA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARIFABRUTA)
            Me.columnD1 = New Global.System.Data.DataColumn("D1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD1)
            Me.columnD2 = New Global.System.Data.DataColumn("D2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD2)
            Me.columnD3 = New Global.System.Data.DataColumn("D3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD3)
            Me.columnD4 = New Global.System.Data.DataColumn("D4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD4)
            Me.columnD5 = New Global.System.Data.DataColumn("D5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD5)
            Me.columnTARIFANETA = New Global.System.Data.DataColumn("TARIFANETA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARIFANETA)
            Me.columnRATINGPROGRAMA = New Global.System.Data.DataColumn("RATINGPROGRAMA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRATINGPROGRAMA)
            Me.columnRATINGTANDA = New Global.System.Data.DataColumn("RATINGTANDA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRATINGTANDA)
            Me.columnTIPO_RATING = New Global.System.Data.DataColumn("TIPO_RATING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_RATING)
            Me.columnACCION = New Global.System.Data.DataColumn("ACCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCION)
            Me.columnU_ACCION = New Global.System.Data.DataColumn("U_ACCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_ACCION)
            Me.columnF_ACCION = New Global.System.Data.DataColumn("F_ACCION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_ACCION)
            Me.columnPROGRAMA_MODIFICADO = New Global.System.Data.DataColumn("PROGRAMA_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROGRAMA_MODIFICADO)
            Me.columnTARIFABRUTA_MODIFICADO = New Global.System.Data.DataColumn("TARIFABRUTA_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARIFABRUTA_MODIFICADO)
            Me.columnD1_MODIFICADO = New Global.System.Data.DataColumn("D1_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD1_MODIFICADO)
            Me.columnD2_MODIFICADO = New Global.System.Data.DataColumn("D2_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD2_MODIFICADO)
            Me.columnD3_MODIFICADO = New Global.System.Data.DataColumn("D3_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD3_MODIFICADO)
            Me.columnD4_MODIFICADO = New Global.System.Data.DataColumn("D4_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD4_MODIFICADO)
            Me.columnD5_MODIFICADO = New Global.System.Data.DataColumn("D5_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD5_MODIFICADO)
            Me.columnTARIFANETA_MODIFICADO = New Global.System.Data.DataColumn("TARIFANETA_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARIFANETA_MODIFICADO)
            Me.columnRATING_MODIFICADO = New Global.System.Data.DataColumn("RATING_MODIFICADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRATING_MODIFICADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("SpotsLogKey1", New Global.System.Data.DataColumn() {Me.columnID_SPOTS_LOG}, false))
            Me.columnID_SPOTS_LOG.AllowDBNull = false
            Me.columnID_SPOTS_LOG.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSpots_LogRow() As Spots_LogRow
            Return CType(Me.NewRow,Spots_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Spots_LogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Spots_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Spots_LogRowChangedEvent) Is Nothing) Then
                RaiseEvent Spots_LogRowChanged(Me, New Spots_LogRowChangeEvent(CType(e.Row,Spots_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Spots_LogRowChangingEvent) Is Nothing) Then
                RaiseEvent Spots_LogRowChanging(Me, New Spots_LogRowChangeEvent(CType(e.Row,Spots_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Spots_LogRowDeletedEvent) Is Nothing) Then
                RaiseEvent Spots_LogRowDeleted(Me, New Spots_LogRowChangeEvent(CType(e.Row,Spots_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Spots_LogRowDeletingEvent) Is Nothing) Then
                RaiseEvent Spots_LogRowDeleting(Me, New Spots_LogRowChangeEvent(CType(e.Row,Spots_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSpots_LogRow(ByVal row As Spots_LogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SpotsLog = New SpotsLog
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Spots_LogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Spots_Detalle_LogDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_SPOTS_LOG As Global.System.Data.DataColumn
        
        Private columnID_SPOT As Global.System.Data.DataColumn
        
        Private columnID_SPOT_DETALLE As Global.System.Data.DataColumn
        
        Private columnF_SPOT As Global.System.Data.DataColumn
        
        Private columnID_TEMA As Global.System.Data.DataColumn
        
        Private columnDURACION As Global.System.Data.DataColumn
        
        Private columnACCION As Global.System.Data.DataColumn
        
        Private columnF_ACCION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Spots_Detalle_Log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_SPOTS_LOGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SPOTS_LOG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_SPOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SPOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_SPOT_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_SPOT_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_SPOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_SPOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_TEMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TEMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DURACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDURACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_ACCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_ACCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Spots_Detalle_LogRow
            Get
                Return CType(Me.Rows(index),Spots_Detalle_LogRow)
            End Get
        End Property
        
        Public Event Spots_Detalle_LogRowChanging As Spots_Detalle_LogRowChangeEventHandler
        
        Public Event Spots_Detalle_LogRowChanged As Spots_Detalle_LogRowChangeEventHandler
        
        Public Event Spots_Detalle_LogRowDeleting As Spots_Detalle_LogRowChangeEventHandler
        
        Public Event Spots_Detalle_LogRowDeleted As Spots_Detalle_LogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSpots_Detalle_LogRow(ByVal row As Spots_Detalle_LogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSpots_Detalle_LogRow(ByVal parentSpots_LogRowBySpots_LogSpots_Detalle_Log As Spots_LogRow, ByVal ID_SPOT As Integer, ByVal ID_SPOT_DETALLE As Integer, ByVal F_SPOT As Date, ByVal ID_TEMA As String, ByVal DURACION As Integer, ByVal ACCION As String, ByVal F_ACCION As Date) As Spots_Detalle_LogRow
            Dim rowSpots_Detalle_LogRow As Spots_Detalle_LogRow = CType(Me.NewRow,Spots_Detalle_LogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ID_SPOT, ID_SPOT_DETALLE, F_SPOT, ID_TEMA, DURACION, ACCION, F_ACCION}
            If (Not (parentSpots_LogRowBySpots_LogSpots_Detalle_Log) Is Nothing) Then
                columnValuesArray(0) = parentSpots_LogRowBySpots_LogSpots_Detalle_Log(0)
            End If
            rowSpots_Detalle_LogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSpots_Detalle_LogRow)
            Return rowSpots_Detalle_LogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Spots_Detalle_LogDataTable = CType(MyBase.Clone,Spots_Detalle_LogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Spots_Detalle_LogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_SPOTS_LOG = MyBase.Columns("ID_SPOTS_LOG")
            Me.columnID_SPOT = MyBase.Columns("ID_SPOT")
            Me.columnID_SPOT_DETALLE = MyBase.Columns("ID_SPOT_DETALLE")
            Me.columnF_SPOT = MyBase.Columns("F_SPOT")
            Me.columnID_TEMA = MyBase.Columns("ID_TEMA")
            Me.columnDURACION = MyBase.Columns("DURACION")
            Me.columnACCION = MyBase.Columns("ACCION")
            Me.columnF_ACCION = MyBase.Columns("F_ACCION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_SPOTS_LOG = New Global.System.Data.DataColumn("ID_SPOTS_LOG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SPOTS_LOG)
            Me.columnID_SPOT = New Global.System.Data.DataColumn("ID_SPOT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SPOT)
            Me.columnID_SPOT_DETALLE = New Global.System.Data.DataColumn("ID_SPOT_DETALLE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_SPOT_DETALLE)
            Me.columnF_SPOT = New Global.System.Data.DataColumn("F_SPOT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_SPOT)
            Me.columnID_TEMA = New Global.System.Data.DataColumn("ID_TEMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TEMA)
            Me.columnDURACION = New Global.System.Data.DataColumn("DURACION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDURACION)
            Me.columnACCION = New Global.System.Data.DataColumn("ACCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCION)
            Me.columnF_ACCION = New Global.System.Data.DataColumn("F_ACCION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_ACCION)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSpots_Detalle_LogRow() As Spots_Detalle_LogRow
            Return CType(Me.NewRow,Spots_Detalle_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Spots_Detalle_LogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Spots_Detalle_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Spots_Detalle_LogRowChangedEvent) Is Nothing) Then
                RaiseEvent Spots_Detalle_LogRowChanged(Me, New Spots_Detalle_LogRowChangeEvent(CType(e.Row,Spots_Detalle_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Spots_Detalle_LogRowChangingEvent) Is Nothing) Then
                RaiseEvent Spots_Detalle_LogRowChanging(Me, New Spots_Detalle_LogRowChangeEvent(CType(e.Row,Spots_Detalle_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Spots_Detalle_LogRowDeletedEvent) Is Nothing) Then
                RaiseEvent Spots_Detalle_LogRowDeleted(Me, New Spots_Detalle_LogRowChangeEvent(CType(e.Row,Spots_Detalle_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Spots_Detalle_LogRowDeletingEvent) Is Nothing) Then
                RaiseEvent Spots_Detalle_LogRowDeleting(Me, New Spots_Detalle_LogRowChangeEvent(CType(e.Row,Spots_Detalle_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSpots_Detalle_LogRow(ByVal row As Spots_Detalle_LogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SpotsLog = New SpotsLog
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Spots_Detalle_LogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CabeceraDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCAMPANIA As Global.System.Data.DataColumn
        
        Private columnSISTEMA As Global.System.Data.DataColumn
        
        Private columnEJERCICIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cabecera"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAMPANIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAMPANIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SISTEMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSISTEMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EJERCICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEJERCICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CabeceraRow
            Get
                Return CType(Me.Rows(index),CabeceraRow)
            End Get
        End Property
        
        Public Event CabeceraRowChanging As CabeceraRowChangeEventHandler
        
        Public Event CabeceraRowChanged As CabeceraRowChangeEventHandler
        
        Public Event CabeceraRowDeleting As CabeceraRowChangeEventHandler
        
        Public Event CabeceraRowDeleted As CabeceraRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCabeceraRow(ByVal row As CabeceraRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCabeceraRow(ByVal CAMPANIA As String, ByVal SISTEMA As String, ByVal EJERCICIO As String) As CabeceraRow
            Dim rowCabeceraRow As CabeceraRow = CType(Me.NewRow,CabeceraRow)
            Dim columnValuesArray() As Object = New Object() {CAMPANIA, SISTEMA, EJERCICIO}
            rowCabeceraRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCabeceraRow)
            Return rowCabeceraRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CabeceraDataTable = CType(MyBase.Clone,CabeceraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CabeceraDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCAMPANIA = MyBase.Columns("CAMPANIA")
            Me.columnSISTEMA = MyBase.Columns("SISTEMA")
            Me.columnEJERCICIO = MyBase.Columns("EJERCICIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCAMPANIA = New Global.System.Data.DataColumn("CAMPANIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAMPANIA)
            Me.columnSISTEMA = New Global.System.Data.DataColumn("SISTEMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSISTEMA)
            Me.columnEJERCICIO = New Global.System.Data.DataColumn("EJERCICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEJERCICIO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCabeceraRow() As CabeceraRow
            Return CType(Me.NewRow,CabeceraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CabeceraRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CabeceraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CabeceraRowChangedEvent) Is Nothing) Then
                RaiseEvent CabeceraRowChanged(Me, New CabeceraRowChangeEvent(CType(e.Row,CabeceraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CabeceraRowChangingEvent) Is Nothing) Then
                RaiseEvent CabeceraRowChanging(Me, New CabeceraRowChangeEvent(CType(e.Row,CabeceraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CabeceraRowDeletedEvent) Is Nothing) Then
                RaiseEvent CabeceraRowDeleted(Me, New CabeceraRowChangeEvent(CType(e.Row,CabeceraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CabeceraRowDeletingEvent) Is Nothing) Then
                RaiseEvent CabeceraRowDeleting(Me, New CabeceraRowChangeEvent(CType(e.Row,CabeceraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCabeceraRow(ByVal row As CabeceraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SpotsLog = New SpotsLog
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CabeceraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Spots_LogRow
        Inherits Global.System.Data.DataRow
        
        Private tableSpots_Log As Spots_LogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpots_Log = CType(Me.Table,Spots_LogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_SPOTS_LOG() As Integer
            Get
                Return CType(Me(Me.tableSpots_Log.ID_SPOTS_LOGColumn),Integer)
            End Get
            Set
                Me(Me.tableSpots_Log.ID_SPOTS_LOGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_SPOT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.ID_SPOTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_SPOT' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.ID_SPOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_CAMPANIA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.ID_CAMPANIAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_CAMPANIA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.ID_CAMPANIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_CAMPANIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.DESC_CAMPANIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESC_CAMPANIA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.DESC_CAMPANIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_SISTEMA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.ID_SISTEMAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_SISTEMA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.ID_SISTEMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_SISTEMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.DESC_SISTEMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESC_SISTEMA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.DESC_SISTEMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_EJERCICIO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.ID_EJERCICIOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_EJERCICIO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.ID_EJERCICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_EJERCICIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.DESC_EJERCICIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESC_EJERCICIO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.DESC_EJERCICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CADENA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.CADENAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CADENA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.CADENAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HORA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.HORAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HORA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.HORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROGRAMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.PROGRAMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROGRAMA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.PROGRAMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TARIFABRUTA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.TARIFABRUTAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARIFABRUTA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.TARIFABRUTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D1' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D2' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D3' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D4' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D5' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TARIFANETA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.TARIFANETAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARIFANETA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.TARIFANETAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RATINGPROGRAMA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.RATINGPROGRAMAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RATINGPROGRAMA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.RATINGPROGRAMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RATINGTANDA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.RATINGTANDAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RATINGTANDA' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.RATINGTANDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_RATING() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.TIPO_RATINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO_RATING' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.TIPO_RATINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.ACCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCION' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.ACCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_ACCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.U_ACCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_ACCION' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.U_ACCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_ACCION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.F_ACCIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F_ACCION' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.F_ACCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROGRAMA_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.PROGRAMA_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROGRAMA_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.PROGRAMA_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TARIFABRUTA_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.TARIFABRUTA_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARIFABRUTA_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.TARIFABRUTA_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D1_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D1_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D1_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D1_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D2_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D2_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D2_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D2_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D3_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D3_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D3_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D3_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D4_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D4_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D4_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D4_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D5_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.D5_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D5_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.D5_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TARIFANETA_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.TARIFANETA_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARIFANETA_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.TARIFANETA_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RATING_MODIFICADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Log.RATING_MODIFICADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RATING_MODIFICADO' in table 'Spots_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Log.RATING_MODIFICADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_SPOTNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.ID_SPOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_SPOTNull()
            Me(Me.tableSpots_Log.ID_SPOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_CAMPANIANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.ID_CAMPANIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_CAMPANIANull()
            Me(Me.tableSpots_Log.ID_CAMPANIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_CAMPANIANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.DESC_CAMPANIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_CAMPANIANull()
            Me(Me.tableSpots_Log.DESC_CAMPANIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_SISTEMANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.ID_SISTEMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_SISTEMANull()
            Me(Me.tableSpots_Log.ID_SISTEMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_SISTEMANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.DESC_SISTEMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_SISTEMANull()
            Me(Me.tableSpots_Log.DESC_SISTEMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_EJERCICIONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.ID_EJERCICIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_EJERCICIONull()
            Me(Me.tableSpots_Log.ID_EJERCICIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_EJERCICIONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.DESC_EJERCICIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_EJERCICIONull()
            Me(Me.tableSpots_Log.DESC_EJERCICIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCADENANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.CADENAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCADENANull()
            Me(Me.tableSpots_Log.CADENAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHORANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.HORAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHORANull()
            Me(Me.tableSpots_Log.HORAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROGRAMANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.PROGRAMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROGRAMANull()
            Me(Me.tableSpots_Log.PROGRAMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTARIFABRUTANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.TARIFABRUTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTARIFABRUTANull()
            Me(Me.tableSpots_Log.TARIFABRUTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD1Null() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD1Null()
            Me(Me.tableSpots_Log.D1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD2Null() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD2Null()
            Me(Me.tableSpots_Log.D2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD3Null() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD3Null()
            Me(Me.tableSpots_Log.D3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD4Null() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD4Null()
            Me(Me.tableSpots_Log.D4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD5Null() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD5Null()
            Me(Me.tableSpots_Log.D5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTARIFANETANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.TARIFANETAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTARIFANETANull()
            Me(Me.tableSpots_Log.TARIFANETAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRATINGPROGRAMANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.RATINGPROGRAMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRATINGPROGRAMANull()
            Me(Me.tableSpots_Log.RATINGPROGRAMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRATINGTANDANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.RATINGTANDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRATINGTANDANull()
            Me(Me.tableSpots_Log.RATINGTANDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_RATINGNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.TIPO_RATINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_RATINGNull()
            Me(Me.tableSpots_Log.TIPO_RATINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCIONNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.ACCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCIONNull()
            Me(Me.tableSpots_Log.ACCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_ACCIONNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.U_ACCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_ACCIONNull()
            Me(Me.tableSpots_Log.U_ACCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_ACCIONNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.F_ACCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_ACCIONNull()
            Me(Me.tableSpots_Log.F_ACCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROGRAMA_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.PROGRAMA_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROGRAMA_MODIFICADONull()
            Me(Me.tableSpots_Log.PROGRAMA_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTARIFABRUTA_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.TARIFABRUTA_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTARIFABRUTA_MODIFICADONull()
            Me(Me.tableSpots_Log.TARIFABRUTA_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD1_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D1_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD1_MODIFICADONull()
            Me(Me.tableSpots_Log.D1_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD2_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D2_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD2_MODIFICADONull()
            Me(Me.tableSpots_Log.D2_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD3_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D3_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD3_MODIFICADONull()
            Me(Me.tableSpots_Log.D3_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD4_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D4_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD4_MODIFICADONull()
            Me(Me.tableSpots_Log.D4_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD5_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.D5_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD5_MODIFICADONull()
            Me(Me.tableSpots_Log.D5_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTARIFANETA_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.TARIFANETA_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTARIFANETA_MODIFICADONull()
            Me(Me.tableSpots_Log.TARIFANETA_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRATING_MODIFICADONull() As Boolean
            Return Me.IsNull(Me.tableSpots_Log.RATING_MODIFICADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRATING_MODIFICADONull()
            Me(Me.tableSpots_Log.RATING_MODIFICADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSpots_Detalle_LogRows() As Spots_Detalle_LogRow()
            If (Me.Table.ChildRelations("Spots_LogSpots_Detalle_Log") Is Nothing) Then
                Return New Spots_Detalle_LogRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Spots_LogSpots_Detalle_Log")),Spots_Detalle_LogRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Spots_Detalle_LogRow
        Inherits Global.System.Data.DataRow
        
        Private tableSpots_Detalle_Log As Spots_Detalle_LogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpots_Detalle_Log = CType(Me.Table,Spots_Detalle_LogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_SPOTS_LOG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.ID_SPOTS_LOGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_SPOTS_LOG' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.ID_SPOTS_LOGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_SPOT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.ID_SPOTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_SPOT' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.ID_SPOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_SPOT_DETALLE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.ID_SPOT_DETALLEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_SPOT_DETALLE' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.ID_SPOT_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_SPOT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.F_SPOTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F_SPOT' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.F_SPOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_TEMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.ID_TEMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_TEMA' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.ID_TEMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DURACION() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.DURACIONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DURACION' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.DURACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.ACCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCION' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.ACCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_ACCION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSpots_Detalle_Log.F_ACCIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F_ACCION' in table 'Spots_Detalle_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpots_Detalle_Log.F_ACCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Spots_LogRow() As Spots_LogRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Spots_LogSpots_Detalle_Log")),Spots_LogRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Spots_LogSpots_Detalle_Log"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_SPOTS_LOGNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.ID_SPOTS_LOGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_SPOTS_LOGNull()
            Me(Me.tableSpots_Detalle_Log.ID_SPOTS_LOGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_SPOTNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.ID_SPOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_SPOTNull()
            Me(Me.tableSpots_Detalle_Log.ID_SPOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_SPOT_DETALLENull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.ID_SPOT_DETALLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_SPOT_DETALLENull()
            Me(Me.tableSpots_Detalle_Log.ID_SPOT_DETALLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_SPOTNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.F_SPOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_SPOTNull()
            Me(Me.tableSpots_Detalle_Log.F_SPOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_TEMANull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.ID_TEMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_TEMANull()
            Me(Me.tableSpots_Detalle_Log.ID_TEMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDURACIONNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.DURACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDURACIONNull()
            Me(Me.tableSpots_Detalle_Log.DURACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCIONNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.ACCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCIONNull()
            Me(Me.tableSpots_Detalle_Log.ACCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_ACCIONNull() As Boolean
            Return Me.IsNull(Me.tableSpots_Detalle_Log.F_ACCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_ACCIONNull()
            Me(Me.tableSpots_Detalle_Log.F_ACCIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CabeceraRow
        Inherits Global.System.Data.DataRow
        
        Private tableCabecera As CabeceraDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCabecera = CType(Me.Table,CabeceraDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAMPANIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCabecera.CAMPANIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CAMPANIA' in table 'Cabecera' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCabecera.CAMPANIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SISTEMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCabecera.SISTEMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SISTEMA' in table 'Cabecera' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCabecera.SISTEMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EJERCICIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCabecera.EJERCICIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EJERCICIO' in table 'Cabecera' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCabecera.EJERCICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAMPANIANull() As Boolean
            Return Me.IsNull(Me.tableCabecera.CAMPANIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAMPANIANull()
            Me(Me.tableCabecera.CAMPANIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSISTEMANull() As Boolean
            Return Me.IsNull(Me.tableCabecera.SISTEMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSISTEMANull()
            Me(Me.tableCabecera.SISTEMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEJERCICIONull() As Boolean
            Return Me.IsNull(Me.tableCabecera.EJERCICIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEJERCICIONull()
            Me(Me.tableCabecera.EJERCICIOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Spots_LogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Spots_LogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Spots_LogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Spots_LogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Spots_Detalle_LogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Spots_Detalle_LogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Spots_Detalle_LogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Spots_Detalle_LogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CabeceraRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CabeceraRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CabeceraRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CabeceraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
